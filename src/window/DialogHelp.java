package window;

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;

/**
  * This class offers a window to put strings and an OK button to leave.
  *
  * @author  Juan C. Burguillo Rial
  * @version 1.0
  */
public class DialogHelp extends JDialog implements KeyListener
{
private static final String sCELLNET_HELP = ""
		+ "\n  HELP CONTENTS\n\n"
		
		+ "  1. Introducing the IPDNet simulator\n"
		+ "  2. Games included into IPDNet\n"
		+ "  3. Main window appearance\n"
		+ "  4. Main window menus\n"
		+ "  5. References\n\n\n"
		
		
		
		
		
		+ "  1. Introducing the IPDNet simulator\n\n"

		+ "  IPDNet is a free to use open-source Java-based software for fast prototyping, developed by Juan C. Burguillo and licensed under the GNU Lesser General Public License (LGPL).\n\n"
		
		+ "  IPDNet works in two modes: i) using a graphical user interface (GUI) for doing micro-simulations or ii) using a batch mode for doing macro-simulations. IPDNet also provides support for:\n"
		+ "    - Visualizing the whole set of cells and their state along each simulation iteration.\n"
		+ "    - Visualizing the simulation results in real time. A set of graphical windows is provided for every relevant simulation result.\n"
		+ "    - Importing network data to reuse particular network structures to run experiments.\n"
		+ "    - Exporting network data, to save a particular network structure. The format used for the exported files is compatible with popular network analyzers such as Pajek or Gephi.\n\n\n"

		
		
		
		+ "  2. Games included into IPDNet\n\n"

		+ "  IPDNet provides a user-friendly access to several in-built games ready to be executed with a single mouse click. These games are shortly described next.\n\n"

		+ "  2.1. Iterated Prisoner’s Dilemma (IPD) on the Network: this is a network version of the famous iterated prisoner’s dilemma, based in the model described in [1].\n\n"

		+ "  2.2 Iterated Prisoner’s Dilemma (IPD) with Probabilistic Memory One strategies (PMO): this is a version based on [2, 3. 4] of the IPD over the network using a probability to describe if a player plays cooperatively after playing CC, CD, DC or DD in the previous round."
		+ " This game has four possible views to describe the strategies playing the game. The views and the colors used are: \n\n"
		+ "      - View Probabilities:   P1 (red)   P2 (orange)   P3 (blue)   P4 (green)\n\n"
		+ "      - View Basic Strats:    All D (black)     d.Spiteful (red)             d.TFT (cyan)       d.Pavlov (yellow)\n\n"
		+ "\t                All C (white)     c.Spiteful (orange)        c.TFT (blue)        c.Pavlov (green)\n\n"
		+ "\t                Unknown (gray)\n\n"
		+ "      - View ZD Strats:       ZD (black)     Equalizer (blue)     Extortioner (red)\n\n"
		+ "      - View P(C) > 0.5:      Avg. Cooperator (green)       Avg. Defector (black)\n\n"

		
		
		+ "  3. Main window appearance\n\n"

		+ "  On the left side of the figure appears the main window that provides a menu bar (described in Figs. 2-6), a control section on the left side with several buttons, a status bar with information at the bottom of the window, and the main grid full of coloured cells; which can be linked among them either spatially (as a lattice) or using any complex topology (small-world, scale free, random network, etc.).\n\n\n"


		
		
		+ "  4. Main window menus\n\n"

		+ "  The File menu contains with several items available to load/save the simulator state and topology. Besides it also allows to import/export the network topology to an external file in a format to be processed by external network tools (Pajek , Gephi , etc.).\n\n"

		+ "  The Game menu allows to execute the different games in IPDNet.\n\n"

		+ "  The Options menu, which is in charge of providing access to the general configuration, the network parameters and the payoff matrix. These are the general configuration parameters that appear in independent windows to be configured. Besides, the Options menu also gives access to the particular parameters used to configure each individual game.\n\n"

		+ "  The Window menu gives access to several data graphical windows to present dynamically and on real time the data generated by the different simulator games. Every game normally uses a particular set of graphical windows, which are remarked with boldface letter.\n\n"

		+ "  The help menu gives access to search facilities, a IPDNet Help item and the About item, which gives contact information and the present game version.\n\n\n"


		
		
		+ "  5. References\n\n"

		+ "  [1] Self-organizing Coalitions for Managing Complexity by J.C. Burguillo. Springer ECC series (Emergence, Complexity and Computation 29). ©Springer International Publishing AG 2018. https://doi.org/10.1007/978-3-319-69898-4\n\n"

		+ "  [3] Axelrod, R. (1986) An evolutionary approach to norms. American political science review, 80(4), 1095-1111.\n";


JTextArea oJTextArea = new JTextArea (sCELLNET_HELP);




/**
  * This is the constructor
  *
  * @param	oParent   Pointer to the object that creates this window
  * @param	sTit      Title of this window
  * @param	bBool     Tells if it is modal (true) or not
  */
public DialogHelp (JFrame oParent, String sTit, boolean bBool)
  {
  super (oParent, sTit, bBool);

  setLayout (new GridLayout(1,1));
  
  oJTextArea.setEditable (false);
  oJTextArea.setLineWrap (true);
  oJTextArea.setWrapStyleWord (true);
  oJTextArea.addKeyListener(this);
  add (new JScrollPane (oJTextArea));
  
  setSize(new Dimension(700, 900));
  setLocation (new Point (300, 100));
  setResizable(true);
  setVisible(true);
  }


public void keyTyped (KeyEvent e) {}
public void keyReleased (KeyEvent e) {}
public void keyPressed (KeyEvent e) {
	if(e.getKeyCode()==KeyEvent.VK_ESCAPE)
		dispose();
}

}	// de la clase DialogOK






